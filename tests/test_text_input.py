from io import StringIO

import os

import pytest

from crosswater.tools.csv_reader import (CsvReader, make_time_hourly)


@pytest.fixture
def csv_file0():
    return StringIO(""""346352";"346350";"346351";"346358";"346359"
"2010-01-01 00:00:00";1.0;2.0;3.0;4.0;5.0
"2010-01-01 01:00:00";1.1;2.1;3.1;4.1;5.1
"2010-01-01 02:00:00";1.2;2.2;3.2;4.2;5.2
"2010-01-01 03:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 04:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 05:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 06:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 07:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 08:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 09:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 10:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 11:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 12:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 13:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 14:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 15:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 16:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 17:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 18:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 19:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 20:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 21:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 22:00:00";1.3;2.3;3.3;4.3;5.3
"2010-01-01 23:00:00";1.4;2.4;3.4;4.4;5.4
"2010-01-02 00:00:00";1.5;2.5;3.5;4.5;5.5
"2010-01-02 01:00:00";1.6;2.6;3.6;4.6;5.6""")


@pytest.fixture
def csv_file1():
    return StringIO(""""346352";"346350";"346351";"346358";"346359"
"2010-01-01 00:00:00";11.0;12.0;13.0;14.0;15.0
"2010-01-01 01:00:00";11.1;12.1;13.1;14.1;15.1
"2010-01-01 02:00:00";11.2;12.2;13.2;14.2;15.2
"2010-01-01 03:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 04:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 05:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 06:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 07:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 08:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 09:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 10:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 11:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 12:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 13:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 14:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 15:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 16:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 17:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 18:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 19:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 20:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 21:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 22:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-01 23:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-02 00:00:00";11.3;12.3;13.3;14.3;15.3
"2010-01-02 01:00:00";11.3;12.3;13.3;14.3;15.3
""")


@pytest.fixture
def csv_file2():
    """Last two columns ar swapped"""
    return StringIO(""""346352";"346350";"346351";"346359";"346358"
"2010-01-01";21.0;22.0;23.0;25.0;24.0
"2010-01-02";21.1;22.1;23.1;25.1;24.1
"2010-01-03";21.2;22.2;23.2;25.2;24.2""")



def test_read_lines(csv_file0, csv_file1, csv_file2):
    reader = CsvReader(csv_file0, csv_file1, csv_file2)

    time0 = make_time_hourly('2010-01-01 00:00:00')
    time1 = make_time_hourly('2010-01-01 01:00:00')
    time2 = make_time_hourly('2010-01-01 02:00:00')
    time3 = make_time_hourly('2010-01-01 03:00:00')
    time24 = make_time_hourly('2010-01-01 23:00:00')
    time25 = make_time_hourly('2010-01-02 00:00:00')
    time26 = make_time_hourly('2010-01-02 01:00:00')

    catchments = next(reader)
    assert catchments[346352] == [time0, 1.0, 11.0, 21.0]
    assert catchments[346350] == [time0, 2.0, 12.0, 22.0]
    assert catchments[346351] == [time0, 3.0, 13.0, 23.0]
    assert catchments[346358] == [time0, 4.0, 14.0, 24.0]
    assert catchments[346359] == [time0, 5.0, 15.0, 25.0]

    catchments = next(reader)
    assert catchments[346352] == [time1, 1.1, 11.1, 21.0]
    assert catchments[346350] == [time1, 2.1, 12.1, 22.0]
    assert catchments[346351] == [time1, 3.1, 13.1, 23.0]
    assert catchments[346358] == [time1, 4.1, 14.1, 24.0]
    assert catchments[346359] == [time1, 5.1, 15.1, 25.0]

    catchments = next(reader)
    assert catchments[346352] == [time2, 1.2, 11.2, 21.0]
    assert catchments[346350] == [time2, 2.2, 12.2, 22.0]
    assert catchments[346351] == [time2, 3.2, 13.2, 23.0]
    assert catchments[346358] == [time2, 4.2, 14.2, 24.0]
    assert catchments[346359] == [time2, 5.2, 15.2, 25.0]

    catchments = next(reader)
    assert catchments[346352] == [time3, 1.3, 11.3, 21.0]
    assert catchments[346350] == [time3, 2.3, 12.3, 22.0]
    assert catchments[346351] == [time3, 3.3, 13.3, 23.0]
    assert catchments[346358] == [time3, 4.3, 14.3, 24.0]
    assert catchments[346359] == [time3, 5.3, 15.3, 25.0]

    for _ in range(24 - 4):
        catchments = next(reader)


    assert catchments[346352] == [time24, 1.4, 11.3, 21.0]
    assert catchments[346350] == [time24, 2.4, 12.3, 22.0]
    assert catchments[346351] == [time24, 3.4, 13.3, 23.0]
    assert catchments[346358] == [time24, 4.4, 14.3, 24.0]
    assert catchments[346359] == [time24, 5.4, 15.3, 25.0]

    catchments = next(reader)
    assert catchments[346352] == [time25, 1.5, 11.3, 21.1]
    assert catchments[346350] == [time25, 2.5, 12.3, 22.1]
    assert catchments[346351] == [time25, 3.5, 13.3, 23.1]
    assert catchments[346358] == [time25, 4.5, 14.3, 24.1]
    assert catchments[346359] == [time25, 5.5, 15.3, 25.1]

    catchments = next(reader)
    assert catchments[346352] == [time26, 1.6, 11.3, 21.1]
    assert catchments[346350] == [time26, 2.6, 12.3, 22.1]
    assert catchments[346351] == [time26, 3.6, 13.3, 23.1]
    assert catchments[346358] == [time26, 4.6, 14.3, 24.1]
    assert catchments[346359] == [time26, 5.6, 15.3, 25.1]

